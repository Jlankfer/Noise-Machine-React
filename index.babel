const library=[{
  id: "Drum 1",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/BD06.mp3",
  loop:false,
  key:"Q",
  keyCode:81
},
 {
  id: "Drum 2",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/BD10.mp3",
  loop:false,
  key:"W",
  keyCode:87
 }
              ,
 {
  id: "Bongo",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/BONGO.mp3",
  loop:false,
  key:"E",
  keyCode:69
 }
              ,
 {
  id: "Claps",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/CLAPS.mp3",
  loop:false,
  key:"A",
  keyCode:65
 }
              ,
 {
  id: "Cowbell",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/COWBELL.mp3",
  loop:false,
  key:"S",
  keyCode:83
 }
              ,
 {
  id: "OPhat",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/OPHAT5.mp3",
  loop:false,
  key:"D",
  keyCode:68
 }
              ,
 {
  id: "SD01",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/SD01.mp3",
  loop:false,
  key:"Z",
  keyCode:90
 }
              ,
 {
  id: "SD10",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/SD10.mp3",
  loop:false,
  key:"X",
  keyCode:88
 }
              ,
 {
  id: "TOMS",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/TOM03M.mp3",
  loop:false,
  key:"C",
  keyCode:67
 }
              ]

const synths = [{
  id:"Roland B01",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20B%20Line%2001.mp3",
  loop:false,
  key:"R",
  keyCode:82
},
                {
  id:"Roland C01",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20C%20Line%2004.mp3",
  loop:false,
  key:"T",
  keyCode:84
},
                {
  id:"Roland D11",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20D%20Line%2011.mp3",
  loop:false,
  key:"Y",
  keyCode:89
},
                {
  id:"Roland D13",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20D%20Line%2013.mp3",
  loop:false,
  key:"F",
  keyCode:70
},
                {
  id:"Blip 01",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2001.mp3",
  loop:false,
  key:"G",
  keyCode:71
},
                {
  id:"Blip 10",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2010.mp3",
  loop:false,
  key:"H",
  keyCode:72
},
                {
  id:"Blip 17",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2017.mp3",
  loop:false,
  key:"V",
  keyCode:86
},
                {
  id:"Blip 29",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2029.mp3",
  loop:false,
  key:"B",
  keyCode:66
},
                {
  id:"Roland F01",
  url:"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20F%20Line%2001.mp3",
  loop:false,
  key:"N",
  keyCode:78
}
               ]

const baselines =[{
  id: "Baseline 1",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/baselinefixed.mp3",
  loop:true,
  key:"1",
  keyCode:49
},
                 {
                   //placeholder same as baseline1 for now
  id: "Baseline 2",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/TechBassR120E-04.mp3",
  loop:true,
  key:"2",
  keyCode:50
},
                 {
  id: "Baseline 3",
  url: "https://raw.githubusercontent.com/rapidsloth/synthesizer/master/TechBassR120E-01.mp3",
  loop:true,
  key:"3",
  keyCode:51
},]

const vaporwave = [{
  background: "linear-gradient(#3b0084 0%, #F765b8 47%, #94D0FF)",
  //app background color
},
{
  background:"#8795E8",
  border:"1px solid black",
  fontFamily:"Orbitron",
  color:"white",
  fontWeight:"bold",
  borderRadius: "3px",
  textShadow:" 3px 3px #c774e8",
  padding:"5px",
  boxShadow:"2px 3px #3b0084"
  //pad css 
  
},
                   {
                    fontSize:"2.5em",
                     color:"#ff71ce",
                     fontFamily:"Orbitron",
                     transform:"rotate(-4deg)",
                     padding:"20px 0px",
                     letterSpacing:"20px",
                     textShadow:"5px 5px purple"
                     //h1 css
                   }
];

const dark = [{
  background: "#212121",
},
{
  background:"#424242",
  border:"1px solid black",
  fontFamily:"Helvetica",
  color:"white",
  fontWeight:"bold",
  borderRadius: "3px"
},
              {
                color:"white"
              }
];


class NoiseMachine extends React.Component{
  constructor(props){
    super(props);
    this.state={
      style: vaporwave,
      display:"Press some keys!",
      synthTable:false,
      baselines:false
    }
    this.handleClick=this.handleClick.bind(this);
    this.makeNoise=this.makeNoise.bind(this);
    this.handleKey=this.handleKey.bind(this);
    this.addSynth = this.addSynth.bind(this);
    this.addBasslines = this.addBasslines.bind(this);
    this.toggleStyle=this.toggleStyle.bind(this);
  }
  addSynth(){ //adds synthbar
    if(this.state.synthTable == false){
      this.setState({
        synthTable:true
      })
    } else if(this.state.synthTable == true){
      this.setState({
        synthTable:false
      })
    }
  }
  
  addBasslines(){ //adds basslines
    if(this.state.baselines == false){
      this.setState({
        baselines:true
      })
    } else if(this.state.baselines == true){
      this.setState({
        baselines:false
      })
    }
  }
  
  makeNoise(x){ //takes the audio element as x and plays sound and handles everything else
    function lookup(arr, elem){
      for(let i in arr){
        if (arr[i].key==elem.id){
          return arr[i].id;
        }
      }
    }
    if(x.loop == true && !x.classList.contains("isPlaying")){
      x.classList.add("isPlaying");
      x.play();
      x.parentNode.style.backgroundColor="orange";
      this.setState({
      display:lookup(baselines, x)
     
    });
    }
    else if(x.loop == true &&x.classList.contains("isPlaying")){
      x.classList.remove("isPlaying");
      x.pause();
      x.currentTime=0;
      const original = this.state.style[1].background
      x.parentNode.style.backgroundColor=original;
      this.setState({
        display:"-"
      })
    }
    else if (x.loop==false){
      x.currentTime = 0;
      x.play();
      const original = this.state.style[1].background
      x.parentNode.style.backgroundColor="orange";
      setTimeout(function(){x.parentNode.style.backgroundColor=original}, 200)
    console.log(this.state.style[1].background,"style");
    this.setState({
      display:lookup(library.slice().concat(synths.slice()), x)
    })
                           };
   

  }
  handleKey(e){ //checks array for what sound to play, lookup array depends on seleceted pads
    let toPlay;
    let checkArray;
   if(this.state.synthTable == true && this.state.baselines == true){
     checkArray = library.slice().concat(synths.slice().concat(baselines.slice()))
   }
    else if (this.state.synthTable == true && this.state.baselines == false){
      checkArray = library.slice().concat(synths.slice());
    }
    else if (this.state.synthTable == false && this.state.baselines == true){
      checkArray = library.slice().concat(baselines.slice())
    }
    else checkArray = library;
    for(let i = 0; i < checkArray.length; i++){
      if(e.keyCode == checkArray[i].keyCode){
        let z = document.getElementById(checkArray[i].key).childNodes[0]
        toPlay=z;
      }
    }
    this.makeNoise(toPlay)
  }
  handleClick(e){
    let x = e.target.childNodes[0];
    this.makeNoise(x);
  }
  toggleStyle(){ //change between styles
    switch(this.state.style){
      case vaporwave:
        this.setState({
          style:dark
        })
        break;
      case dark:
        this.setState({
          style:vaporwave
        })
        break;
    }
  }
componentDidMount(){
  document.addEventListener("keydown", this.handleKey);
}
componentWillUnmount(){
  document.removeEventListener("keydown", this.handleKey);
}
  
  render(){
    const drums = <Pads
          id="pads"
          style={this.state.style[1]}
          handleClick={this.handleClick}
          library={library}
          />
const synthesizer = <Pads
          id="synths"
          style={this.state.style[1]}
          handleClick={this.handleClick}
          library={synths}
          />          
       const basslines = <Pads
          id="basslines"
          style={this.state.style[1]}
          handleClick={this.handleClick}
          library={baselines}
          />
                          
    return(
      <div 
        id="drum-machine"
        style={this.state.style[0]}>
      <h1 style={this.state.style[2]}>Noise Machine</h1>
        <div id="button-container">
        <button className="buttons"id="synth-button" style = {this.state.style[1]}onClick = {this.addSynth}>{(this.state.synthTable == false)?"Add Synthesizer!":"Less synth!"}</button>
        <button className="buttons" id="bass-button" style = {this.state.style[1]}onClick = {this.addBasslines}>{(this.state.baselines == false)?"Add Basslines!":"Less Basslines!"}</button>
          <button className="buttons" id="style-button" style={this.state.style[1]} onClick={this.toggleStyle}>Change Style!</button>
        </div>
       <div id="display" style={this.state.style[1]}>{this.state.display}</div>
        <div id="multipad">
        {drums}
        {(this.state.synthTable == true)? synthesizer : <div />}
          </div>
        {(this.state.baselines == true)? basslines: <div />}
        {(this.state.style==vaporwave)?<div id="author">作者：<a href="https://github.com/rapidsloth" target="_blank" >ジャック</a></div>:<div />}
        </div>
    )
  }
}

class Pad extends React.Component{
  constructor(props){
    super(props);
  }
  render(){
    return(
      <div id={this.props.ident}
        className="drum-pad"
         onClick={this.props.onClick}
        style={this.props.style}>
        <audio className="clip" id={this.props.inner}  loop={this.props.loop} src={this.props.sample}></audio>
        {this.props.inner}</div>
      )
  }
}

class Pads extends React.Component{
  constructor(props){
    super(props);
  }
  render(){
    let padBank;
    padBank=this.props.library.map((obj, i, padArray) => {return(
      <div>
        <Pad 
          ident={padArray[i].key}
          onClick={this.props.handleClick}
          style={this.props.style}
          sample={padArray[i].url}
          loop={padArray[i].loop}
          inner={padArray[i].key}
          />
        </div>
    )
    })
    return(
      <div  className="pads-container">
        {padBank}
        </div>
    )
  }
}

ReactDOM.render(<NoiseMachine />, document.getElementById("root"))